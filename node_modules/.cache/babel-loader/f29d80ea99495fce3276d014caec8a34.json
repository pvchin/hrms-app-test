{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { queryClient } from \"react-query/queryClient\";\nimport { queryKeys } from \"../../../react-query/constants\";\nimport { clearStoredUser, getStoredUser, setStoredUser } from \"../user-storage\";\nimport { useEmployees } from \"./employees/useEmployees\";\n\nasync function getUser(user) {\n  if (!user) return null; //   const data = employees\n  //     .filter((f) => f.email === user)\n  //     .map((r) => {\n  //       return { ...r };\n  //     });\n  //return user;\n  //   if (!user) return null;\n  //   const { data } = await axiosInstance.get(`/user/${user.id}`, {\n  //     headers: getJWTHeader(user),\n  //   });\n  //   return data.user;\n}\n\nexport function useUser() {\n  _s();\n\n  const [user, setUser] = useState(getStoredUser() || null);\n  useQuery(queryKeys.user, () => getUser(user), {\n    enabled: !!user,\n    onSuccess: data => setUser(data)\n  }); // meant to be called from useAuth\n\n  function updateUser(newUser) {\n    // set user in state\n    setUser(newUser); // update user in localstorage\n\n    setStoredUser(newUser); // TODO: pre-populate user profile in React Query client\n  } // meant to be called from useAuth\n\n\n  function clearUser() {\n    // update state\n    setUser(null); // remove from localstorage\n\n    clearStoredUser();\n    queryClient.setQueryData(queryKeys.user, null);\n    queryClient.removeQueries([queryKeys.user]);\n  }\n\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n\n_s(useUser, \"N0etqsgjH3CiqhyasktOjZ6xycc=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/user/useUser.js"],"names":["useState","useQuery","queryClient","queryKeys","clearStoredUser","getStoredUser","setStoredUser","useEmployees","getUser","user","useUser","setUser","enabled","onSuccess","data","updateUser","newUser","clearUser","setQueryData","removeQueries"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,aAAzC,QAA8D,iBAA9D;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,eAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP,CADgB,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;;AAED,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,QAAM,CAACD,IAAD,EAAOE,OAAP,IAAkBX,QAAQ,CAACK,aAAa,MAAM,IAApB,CAAhC;AAEAJ,EAAAA,QAAQ,CAACE,SAAS,CAACM,IAAX,EAAiB,MAAMD,OAAO,CAACC,IAAD,CAA9B,EAAsC;AAC5CG,IAAAA,OAAO,EAAE,CAAC,CAACH,IADiC;AAE5CI,IAAAA,SAAS,EAAGC,IAAD,IAAUH,OAAO,CAACG,IAAD;AAFgB,GAAtC,CAAR,CAHwB,CAQxB;;AACA,WAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B;AACAL,IAAAA,OAAO,CAACK,OAAD,CAAP,CAF2B,CAI3B;;AACAV,IAAAA,aAAa,CAACU,OAAD,CAAb,CAL2B,CAO3B;AACD,GAjBuB,CAmBxB;;;AACA,WAASC,SAAT,GAAqB;AACnB;AACAN,IAAAA,OAAO,CAAC,IAAD,CAAP,CAFmB,CAInB;;AACAP,IAAAA,eAAe;AAEfF,IAAAA,WAAW,CAACgB,YAAZ,CAAyBf,SAAS,CAACM,IAAnC,EAAyC,IAAzC;AAEAP,IAAAA,WAAW,CAACiB,aAAZ,CAA0B,CAAChB,SAAS,CAACM,IAAX,CAA1B;AACD;;AAED,SAAO;AAAEA,IAAAA,IAAF;AAAQM,IAAAA,UAAR;AAAoBE,IAAAA;AAApB,GAAP;AACD;;GAjCeP,O;UAGdT,Q","sourcesContent":["import { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { queryClient } from \"react-query/queryClient\";\r\n\r\nimport { queryKeys } from \"../../../react-query/constants\";\r\nimport { clearStoredUser, getStoredUser, setStoredUser } from \"../user-storage\";\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\nasync function getUser(user) {\r\n  if (!user) return null;\r\n  //   const data = employees\r\n  //     .filter((f) => f.email === user)\r\n  //     .map((r) => {\r\n  //       return { ...r };\r\n  //     });\r\n  //return user;\r\n  //   if (!user) return null;\r\n  //   const { data } = await axiosInstance.get(`/user/${user.id}`, {\r\n  //     headers: getJWTHeader(user),\r\n  //   });\r\n\r\n  //   return data.user;\r\n}\r\n\r\nexport function useUser() {\r\n  const [user, setUser] = useState(getStoredUser() || null);\r\n  \r\n  useQuery(queryKeys.user, () => getUser(user), {\r\n    enabled: !!user,\r\n    onSuccess: (data) => setUser(data),\r\n  });\r\n\r\n  // meant to be called from useAuth\r\n  function updateUser(newUser) {\r\n    // set user in state\r\n    setUser(newUser);\r\n\r\n    // update user in localstorage\r\n    setStoredUser(newUser);\r\n\r\n    // TODO: pre-populate user profile in React Query client\r\n  }\r\n\r\n  // meant to be called from useAuth\r\n  function clearUser() {\r\n    // update state\r\n    setUser(null);\r\n\r\n    // remove from localstorage\r\n    clearStoredUser();\r\n\r\n    queryClient.setQueryData(queryKeys.user, null);\r\n\r\n    queryClient.removeQueries([queryKeys.user]);\r\n  }\r\n\r\n  return { user, updateUser, clearUser };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}