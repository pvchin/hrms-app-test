{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable-july2\\\\src\\\\components\\\\EmpFamily.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { useFamily } from \"./family/useFamily\";\nimport { useUpdateFamily } from \"./family/useUpdateFamily\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Relationship\",\n  field: \"relationship\",\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || null}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    style: {\n      width: 100\n    },\n    value: props.value,\n    select: true,\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Father\",\n      children: \"Father\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Mother\",\n      children: \"Mother\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Daughter\",\n      children: \"Daughter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Son\",\n      children: \"Son\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Son-in-law\",\n      children: \"Son-in-law\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Daughter-in-law\",\n      children: \"Daughter-in-law\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"BIrth Date\",\n  field: \"birth_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField, {\n    defaultValue: props.value || null,\n    onChange: e => props.onChange(e.target.value),\n    type: \"date\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"Phone\",\n  field: \"phone\"\n}, {\n  title: \"Age\",\n  field: \"age\",\n  type: \"numeric\"\n}];\nexport default function Emp_Family() {\n  _s();\n\n  const classes = useStyles();\n  const {\n    family,\n    filter,\n    setFilter,\n    setFamilyId\n  } = useFamily();\n  const updateFamily = useUpdateFamily();\n  const [familydata, setFamilydata] = useState([]);\n  const {\n    editEmployeeID\n  } = useEmployeesContext();\n  const {\n    singlebatchfamily,\n    addFamily,\n    deleteFamily,\n    //updateFamily,\n    singlebatch_family_loading,\n    singlebatch_family_error,\n    loadSingleBatchFamily\n  } = useTablesContext();\n\n  const Save_FamilyData = () => {\n    // delete unwanted data\n    singlebatchfamily.forEach(row => {\n      const {\n        id,\n        rec_id\n      } = row;\n      const res = familydata.find(r => r.rec_id === rec_id);\n\n      if (!res) {\n        deleteFamily(id);\n      }\n    }); //add or update new data\n\n    familydata.forEach(data => {\n      const {\n        id,\n        name,\n        relationship,\n        birth_date,\n        phone,\n        age\n      } = data;\n\n      if (id) {\n        const {\n          id,\n          rec_id,\n          tableData,\n          ...fields\n        } = data;\n        updateFamily({\n          id,\n          ...fields\n        });\n      } else {\n        addFamily({\n          name,\n          relationship,\n          birth_date,\n          phone,\n          age,\n          empid: editEmployeeID\n        });\n      }\n    }); //handleDialogClose();\n  };\n\n  const update_Family = data => {\n    const {\n      id,\n      rec_id,\n      tableData,\n      ...fields\n    } = data;\n    updateFamily({\n      id,\n      ...fields\n    });\n  };\n\n  const add_Family = data => {\n    // const { name, relationship } = data;\n    // const rec = singlebatchfamily;\n    // rec.push({ ...data });\n    addFamily({ ...data,\n      empid: editEmployeeID\n    });\n    loadSingleBatchFamily(editEmployeeID);\n  };\n\n  const delete_Family = data => {\n    const {\n      id\n    } = data;\n    deleteFamily(id); // const index = data.tableData.id;\n    // const rec = singlebatchfamily\n    // rec.splice(index, 1);\n\n    loadSingleBatchFamily(editEmployeeID);\n  };\n\n  const Refresh_Data = () => {\n    loadSingleBatchFamily(editEmployeeID);\n  };\n\n  useEffect(() => {\n    setFamilyId(editEmployeeID);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: family,\n        title: \"Family\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // setFamilydata([...familydata, newData]);\n              add_Family(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // const dataUpdate = [...familydata];\n              // const index = oldData.tableData.id;\n              // dataUpdate[index] = newData;\n              // setFamilydata([...dataUpdate]);\n              update_Family(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              //const dataDelete = [...familydata];\n              //const index = oldData.tableData.id;\n              // dataDelete.splice(index, 1);\n              // setFamilydata([...dataDelete]);\n              delete_Family(oldData);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: Refresh_Data,\n                children: [\"Refresh \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        } // localization={{\n        //   body: {\n        //     dateTimePickerLocalization: enGB,\n        //   },\n        // }}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Emp_Family, \"R65WclYzWUG2mP+CAGRJld1rHAs=\", false, function () {\n  return [useStyles, useFamily, useUpdateFamily, useEmployeesContext, useTablesContext];\n});\n\n_c = Emp_Family;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Emp_Family\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/EmpFamily.js"],"names":["React","useState","useEffect","MaterialTable","MTableToolbar","makeStyles","Button","Icon","TextField","MenuItem","useEmployeesContext","useTablesContext","useFamily","useUpdateFamily","columns","title","field","editComponent","props","e","onChange","target","value","width","type","dateSetting","locale","Emp_Family","classes","useStyles","family","filter","setFilter","setFamilyId","updateFamily","familydata","setFamilydata","editEmployeeID","singlebatchfamily","addFamily","deleteFamily","singlebatch_family_loading","singlebatch_family_error","loadSingleBatchFamily","Save_FamilyData","forEach","row","id","rec_id","res","find","r","data","name","relationship","birth_date","phone","age","tableData","fields","empid","update_Family","add_Family","delete_Family","Refresh_Data","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useFamily } from \"./family/useFamily\";\r\nimport { useUpdateFamily } from \"./family/useUpdateFamily\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Relationship\",\r\n    field: \"relationship\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Father\">Father</MenuItem>\r\n        <MenuItem value=\"Mother\">Mother</MenuItem>\r\n        <MenuItem value=\"Daughter\">Daughter</MenuItem>\r\n        <MenuItem value=\"Son\">Son</MenuItem>\r\n        <MenuItem value=\"Son-in-law\">Son-in-law</MenuItem>\r\n        <MenuItem value=\"Daughter-in-law\">Daughter-in-law</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n  {\r\n    title: \"BIrth Date\",\r\n    field: \"birth_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"Phone\",\r\n    field: \"phone\",\r\n  },\r\n  { title: \"Age\", field: \"age\", type: \"numeric\" },\r\n];\r\n\r\nexport default function Emp_Family() {\r\n  const classes = useStyles();\r\n  const { family, filter, setFilter, setFamilyId } = useFamily();\r\n  const updateFamily = useUpdateFamily();\r\n  const [familydata, setFamilydata] = useState([]);\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    singlebatchfamily,\r\n    addFamily,\r\n    deleteFamily,\r\n    //updateFamily,\r\n    singlebatch_family_loading,\r\n    singlebatch_family_error,\r\n    loadSingleBatchFamily,\r\n  } = useTablesContext();\r\n\r\n  const Save_FamilyData = () => {\r\n    // delete unwanted data\r\n    singlebatchfamily.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = familydata.find((r) => r.rec_id === rec_id);\r\n      if (!res) {\r\n        deleteFamily(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    familydata.forEach((data) => {\r\n      const { id, name, relationship, birth_date, phone, age } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updateFamily({ id, ...fields });\r\n      } else {\r\n        addFamily({\r\n          name,\r\n          relationship,\r\n          birth_date,\r\n          phone,\r\n          age,\r\n          empid: editEmployeeID,\r\n        });\r\n      }\r\n    });\r\n\r\n    //handleDialogClose();\r\n  };\r\n\r\n  const update_Family = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n    updateFamily({ id, ...fields });\r\n  };\r\n\r\n  const add_Family = (data) => {\r\n    // const { name, relationship } = data;\r\n    // const rec = singlebatchfamily;\r\n    // rec.push({ ...data });\r\n    addFamily({ ...data, empid: editEmployeeID });\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  const delete_Family = (data) => {\r\n    const { id } = data;\r\n    deleteFamily(id);\r\n    // const index = data.tableData.id;\r\n    // const rec = singlebatchfamily\r\n    // rec.splice(index, 1);\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  const Refresh_Data = () => {\r\n    loadSingleBatchFamily(editEmployeeID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFamilyId(editEmployeeID);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={family}\r\n          title=\"Family\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // setFamilydata([...familydata, newData]);\r\n                  add_Family(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataUpdate = [...familydata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataUpdate[index] = newData;\r\n                  // setFamilydata([...dataUpdate]);\r\n                  update_Family(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  //const dataDelete = [...familydata];\r\n                  //const index = oldData.tableData.id;\r\n                  // dataDelete.splice(index, 1);\r\n                  // setFamilydata([...dataDelete]);\r\n                  delete_Family(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Refresh_Data}\r\n                  >\r\n                    Refresh <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n          // localization={{\r\n          //   body: {\r\n          //     dateTimePickerLocalization: enGB,\r\n          //   },\r\n          // }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}