{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable-july2\\\\src\\\\components\\\\Payslip_Deductions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { payPeriodState, payPeriodEndMonthState, payPeriodEmpIdState, payEarningDataState } from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Payslip_Deductions({\n  setCalc,\n  deductionsdata,\n  oldDeductionsdata,\n  setDeductionsdata,\n  handleDialogClose\n}) {\n  _s();\n\n  const classes = useStyles();\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\n  const payPeriod = useRecoilValue(payPeriodState);\n  const payEarningData = useRecoilValue(payEarningDataState);\n  const {\n    payslipdeductions,\n    payslip_deduction_amount,\n    setPayslipDeductionAmount,\n    loadPayslipDeductions,\n    addPayslipDeduction,\n    payslipdeductions_loading,\n    updatePayslipDeduction,\n    deletePayslipDeduction,\n    updatePayslip,\n    editPayslipID,\n    single_payslip,\n    payslip_period,\n    getSingleBatchPayslipDeductions\n  } = usePayslipsContext();\n  const {\n    name,\n    amount\n  } = payslipdeductions;\n  const {\n    deductions\n  } = useTablesContext();\n\n  const calc_Deduction = data => {\n    const sum = data.reduce((a, v) => a = a + v.amount, 0);\n    setPayslipDeductionAmount(sum);\n  };\n\n  const columns = [{\n    title: \"Description\",\n    field: \"description\",\n    editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || null}\n    , {\n      onChange: e => props.onChange(e.target.value),\n      style: {\n        width: 200\n      },\n      value: props.value,\n      select: true,\n      children: deductions.map(r => {\n        return /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: r.name,\n          children: r.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, {\n    title: \"Amount\",\n    field: \"amount\",\n    type: \"currency\"\n  }];\n  useEffect(() => {\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  }, []);\n\n  const update_Payslip = () => {\n    const {\n      rec_id,\n      id,\n      total_deductions,\n      ...paydata\n    } = single_payslip;\n    updatePayslip({\n      id: editPayslipID,\n      total_deductions: payslip_deduction_amount,\n      ...paydata\n    });\n  };\n\n  const update_PayslipDeduction = async data => {\n    const {\n      id,\n      rec_id,\n      empid,\n      ...fields\n    } = data;\n    updatePayslipDeduction({\n      id: data.id,\n      empid: empid,\n      ...fields\n    });\n    update_Payslip();\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const add_PayslipDeduction = data => {\n    const {\n      description,\n      amount\n    } = data;\n    addPayslipDeduction({\n      description: description,\n      amount: amount,\n      name: single_payslip.name,\n      empid: single_payslip.empid,\n      period: single_payslip.period\n    });\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const delete_PayslipDeduction = data => {\n    const {\n      id\n    } = data;\n    deletePayslipDeduction(id);\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const Save_DeductionsData = () => {\n    // delete unwanted data\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\n    oldDeductionsdata.forEach(row => {\n      const {\n        id,\n        rec_id\n      } = row;\n      const res = deductionsdata.find(r => r.rec_id === rec_id);\n      console.log(\"find\", id, res);\n\n      if (!res) {\n        deletePayslipDeduction(id);\n      }\n    }); //add or update new data\n\n    deductionsdata.forEach(data => {\n      const {\n        id,\n        description,\n        amount\n      } = data;\n\n      if (id) {\n        const {\n          id,\n          rec_id,\n          tableData,\n          ...fields\n        } = data;\n        updatePayslipDeduction({\n          id,\n          ...fields\n        });\n      } else {\n        addPayslipDeduction({\n          description: description,\n          amount: amount,\n          name: single_payslip.name,\n          empid: payPeriodEmpId,\n          period: payPeriod\n        });\n      }\n    });\n    handleDialogClose();\n  };\n\n  if (payslipdeductions_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading... Expenses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: deductionsdata,\n        title: \"Deductions\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              setDeductionsdata([...deductionsdata, newData]);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataUpdate = [...deductionsdata];\n              const index = oldData.tableData.id;\n              dataUpdate[index] = newData;\n              setDeductionsdata([...dataUpdate]);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...deductionsdata];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              setDeductionsdata([...dataDelete]);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: Save_DeductionsData,\n                children: [\"Update \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 28\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payslip_Deductions, \"DKh9EfbHTwVhUdR6/g3Bpm6gdm0=\", false, function () {\n  return [useStyles, useRecoilValue, useRecoilValue, useRecoilValue, usePayslipsContext, useTablesContext];\n});\n\n_c = Payslip_Deductions;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Payslip_Deductions\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/Payslip_Deductions.js"],"names":["React","useState","useEffect","MaterialTable","MTableToolbar","makeStyles","Button","Icon","TextField","MenuItem","useSetRecoilState","useRecoilValue","payPeriodState","payPeriodEndMonthState","payPeriodEmpIdState","payEarningDataState","usePayslipsContext","useTablesContext","Payslip_Deductions","setCalc","deductionsdata","oldDeductionsdata","setDeductionsdata","handleDialogClose","classes","useStyles","payPeriodEmpId","payPeriod","payEarningData","payslipdeductions","payslip_deduction_amount","setPayslipDeductionAmount","loadPayslipDeductions","addPayslipDeduction","payslipdeductions_loading","updatePayslipDeduction","deletePayslipDeduction","updatePayslip","editPayslipID","single_payslip","payslip_period","getSingleBatchPayslipDeductions","name","amount","deductions","calc_Deduction","data","sum","reduce","a","v","columns","title","field","editComponent","props","e","onChange","target","value","width","map","r","type","empid","update_Payslip","rec_id","id","total_deductions","paydata","update_PayslipDeduction","fields","add_PayslipDeduction","description","period","delete_PayslipDeduction","Save_DeductionsData","console","log","forEach","row","res","find","tableData","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","index","onRowDelete","dataDelete","splice","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField, MenuItem } from \"@material-ui/core\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  payEarningDataState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions({\r\n  setCalc,\r\n  deductionsdata,\r\n  oldDeductionsdata,\r\n  setDeductionsdata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    payslipdeductions,\r\n    payslip_deduction_amount,\r\n    setPayslipDeductionAmount,\r\n    loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    updatePayslip,\r\n    editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  const calc_Deduction = (data) => {\r\n    const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n    setPayslipDeductionAmount(sum);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Description\",\r\n      field: \"description\",\r\n      editComponent: (props) => (\r\n        <TextField\r\n          //defaultValue={props.value || null}\r\n          onChange={(e) => props.onChange(e.target.value)}\r\n          style={{ width: 200 }}\r\n          value={props.value}\r\n          select\r\n        >\r\n          {deductions.map((r) => {\r\n            return <MenuItem value={r.name}>{r.name}</MenuItem>;\r\n          })}\r\n        </TextField>\r\n      ),\r\n    },\r\n    { title: \"Amount\", field: \"amount\", type: \"currency\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  const update_Payslip = () => {\r\n    const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_deductions: payslip_deduction_amount,\r\n      ...paydata,\r\n    });\r\n  };\r\n\r\n  const update_PayslipDeduction = async (data) => {\r\n    const { id, rec_id, empid, ...fields } = data;\r\n    updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n    update_Payslip();\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const add_PayslipDeduction = (data) => {\r\n    const { description, amount } = data;\r\n    addPayslipDeduction({\r\n      description: description,\r\n      amount: amount,\r\n      name: single_payslip.name,\r\n      empid: single_payslip.empid,\r\n      period: single_payslip.period,\r\n    });\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const delete_PayslipDeduction = (data) => {\r\n    const { id } = data;\r\n    deletePayslipDeduction(id);\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={deductionsdata}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_DeductionsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}