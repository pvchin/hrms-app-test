{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable-july2\\\\src\\\\components\\\\PayslipForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer, useEffect, useRef } from \"react\";\nimport { Button, Icon, TextField, Paper, Typography, Select, Divider, Grid, Toolbar, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardLayout from \"../helpers/CardLayout\";\nimport CardLayout2 from \"../helpers/CardLayout2\";\nimport { CustomDialog } from \"../helpers/CustomDialog\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { payPeriodState, payPeriodEndMonthState, payPeriodEmpIdState, payEarningDataState, payDeductionDataState } from \"./data/atomdata\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport Payslip_ViewEarnings from \"./Payslip_ViewEarnings\";\nimport Payslip_ViewDeductions from \"./Payslip_ViewDeductions\";\nimport Payslip_Earnings from \"./Payslip_Earnings\";\nimport Payslip_Deductions from \"./Payslip_Deductions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initial_values = {\n  name: \"\",\n  period: \"\",\n  date: \"\",\n  bank_name: \"\",\n  bank_acno: \"\",\n  status: \"Pending\",\n  total_earnings: 0,\n  total_deductions: 0,\n  tap_amount: 0,\n  scp_amount: 0,\n  basic_pay: 0,\n  nett_pay: 0\n};\n\nconst PayslipForm = () => {\n  _s();\n\n  let history = useHistory();\n  const [calc, setCalc] = useState(false);\n  const classes = useStyles();\n  const {\n    isPayslipEditing,\n    single_payslip,\n    updatePayslip,\n    addPayslip,\n    editPayslipID,\n    loadPayslips,\n    getSinglePayslip,\n    single_payslip_loading,\n    single_payslip_error,\n    payslip_period,\n    payslip_earning_amount,\n    payslip_deduction_amount,\n    setPayslipEarningAmount,\n    setPayslipDeductionAmount,\n    payslipearnings,\n    payslipdeductions,\n    getSingleBatchPayslipEarnings,\n    getSingleBatchPayslipDeductions\n  } = usePayslipsContext();\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  const {\n    loadAllowances,\n    loadDeductions,\n    allowances,\n    deductions\n  } = useTablesContext();\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\n  const payPeriod = useRecoilValue(payPeriodState);\n  const setPayEarningData = useSetRecoilState(payEarningDataState);\n  const setPayDeductionData = useSetRecoilState(payDeductionDataState);\n  const [earningsdata, setEarningsdata] = useState([]);\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\n  const [deductionsdata, setDeductionsdata] = useState([]);\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false); //const [state, setState] = useState(single_payslip);\n\n  const {\n    handleSubmit,\n    control\n  } = useForm();\n  const {\n    name,\n    period,\n    date,\n    bank_name,\n    bank_acno,\n    status,\n    total_earnings,\n    total_deductions,\n    tap_amount,\n    scp_amount,\n    basic_pay,\n    nett_pay\n  } = single_payslip;\n  useEffect(async () => {\n    getSinglePayslip(editPayslipID);\n  }, []); // useEffect(() => {\n  //   if (calc) {\n  //     setTimeout(() => {\n  //       console.log(\"calc\");\n  //       calc_totals();\n  //       setCalc(false);\n  //     }, 10000);\n  //   }\n  // }, [calc]);\n\n  const handleChange = event => {//const { rec_id, ...fields } = single_payslip;\n    // const value =\n    //   event.target.type === \"number\"\n    //     ? parseInt(event.target.value, 10)\n    //     : event.target.value;\n    // setState({ ...state, [event.target.name]: value });\n  };\n\n  const calc_totals = () => {\n    const totalTAP = Math.ceil(basic_pay * 0.05);\n    const totalSCP = Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\n    const totalEarnings = payslipearnings.reduce((a, v) => a = a + v.amount, 0);\n    const totalDeductions = payslipdeductions.reduce((a, v) => a = a + v.amount, 0);\n    const nettPay = basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\n    setPayslipEarningAmount(totalEarnings);\n    setPayslipDeductionAmount(totalDeductions);\n    updatePayslip({\n      id: editPayslipID,\n      total_earnings: totalEarnings,\n      total_deductions: totalDeductions,\n      tap_amount: totalTAP,\n      scp_amount: totalSCP,\n      nett_pay: nettPay\n    });\n    console.log(\"total\", totalEarnings, totalDeductions, totalTAP, totalSCP, nettPay);\n    getSinglePayslip(editPayslipID);\n  };\n\n  const onSubmit = data => {\n    const {\n      rec_id,\n      ...fields\n    } = single_payslip;\n    updatePayslip(...fields); // if (isPayslipEditing) {\n    //   updatePayslip({ id: editPayslipID, ...data });\n    // } else {\n    //   addPayslip({ ...data });\n    // }\n    // loadPayslips();\n    // history.push(\"/batchpayslips\");\n  };\n\n  const handleEarningsDialogOpen = () => {\n    // setPayEarningData([...payslipearnings]);\n    setOldEarningsdata([...payslipearnings]);\n    setEarningsdata([...payslipearnings]);\n    setIsEarningsDialogOpen(true);\n  };\n\n  const handleEarningsDialogClose = () => {\n    setIsEarningsDialogOpen(false);\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\n  };\n\n  const handleDeductionsDialogOpen = () => {\n    setOldDeductionsdata([...payslipdeductions]);\n    setDeductionsdata([...payslipdeductions]);\n    setIsDeductionsDialogOpen(true);\n  };\n\n  const handleDeductionsDialogClose = () => {\n    setIsDeductionsDialogOpen(false);\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\n  };\n\n  if (single_payslip_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (single_payslip_error) {\n    history.push(\"/error\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 8,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(CardLayout2, {\n          title: \"Employee Profile\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  component: \"h3\",\n                  children: \"PAYSLIP FORM\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"p\",\n                  children: \"Payslip Preparation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  children: [\"Submit \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"name\",\n                  control: control,\n                  defaultValue: name,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Name\",\n                      id: \"margin-normal\",\n                      name: \"name\",\n                      defaultValue: name,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 25\n                    }, this);\n                  },\n                  rules: {\n                    required: \"Name required\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"period\",\n                  control: control,\n                  defaultValue: period,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Period\",\n                      id: \"margin-normal\",\n                      name: \"period\",\n                      defaultValue: period,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"date\",\n                  control: control,\n                  defaultValue: date,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Date\",\n                      type: \"date\",\n                      id: \"margin-normal\",\n                      name: \"date\",\n                      defaultValue: date,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputLabelProps: {\n                        shrink: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 300,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"bank_name\",\n                  control: control,\n                  defaultValue: bank_name,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Bank Name\",\n                      id: \"margin-normal\",\n                      name: \"bank_name\",\n                      defaultValue: bank_name,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"bank_acno\",\n                  control: control,\n                  defaultValue: bank_acno,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Bank AC No\",\n                      id: \"margin-normal\",\n                      name: \"bank_acno\",\n                      value: bank_acno,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"tap_amount\",\n                  control: control,\n                  defaultValue: tap_amount,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"TAP Contrinution\",\n                      type: \"currency\",\n                      id: \"standard-number\",\n                      name: \"tap_amount\",\n                      defaultValue: tap_amount,\n                      className: classes.textField //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 377,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"scp_amount\",\n                  control: control,\n                  defaultValue: scp_amount,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"SCP Contribution\",\n                      type: \"currency\",\n                      id: \"standard-number\",\n                      name: \"scp_amount\",\n                      defaultValue: scp_amount,\n                      className: classes.textField //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 405,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"total_earnings\",\n                  control: control,\n                  defaultValue: total_earnings,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Total Earnings\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"total_earnings\",\n                      value: total_earnings,\n                      className: classes.textField //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"total_deductions\",\n                  control: control,\n                  defaultValue: total_deductions,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Total Deductions\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"total_deductions\",\n                      value: total_deductions,\n                      className: classes.textField //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 463,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"basic_pay\",\n                  control: control,\n                  defaultValue: basic_pay,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Basic Pay\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"basic_pay\",\n                      value: basic_pay,\n                      className: classes.textField,\n                      onChange: handleChange,\n                      InputProps: {\n                        readOnly: true\n                      } // onChange={(e) => {\n                      //   handleChange(parseInt(e.target.value, 10));\n                      // }}\n\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 493,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"nett_pay\",\n                  control: control,\n                  defaultValue: nett_pay,\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    },\n                    fieldState: {\n                      error\n                    }\n                  }) => {\n                    return /*#__PURE__*/_jsxDEV(TextField, {\n                      label: \"Nett Pay\",\n                      type: \"number\",\n                      id: \"standard-number\",\n                      name: \"nett_pay\",\n                      value: nett_pay,\n                      className: classes.textField //onChange={onChange}\n                      ,\n                      onChange: e => {\n                        handleChange(parseInt(e.target.value, 10));\n                      },\n                      InputProps: {\n                        readOnly: true\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 521,\n                      columnNumber: 25\n                    }, this);\n                  } //rules={{ required: \"Name required\" }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"primary\",\n                className: classes.button,\n                onClick: calc_totals,\n                children: [\"Calc \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 24\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              className: classes.divider\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          className: classes.grid,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            md: 8,\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(CardLayout, {\n                title: \"Earnings\",\n                handleClick: handleEarningsDialogOpen,\n                children: /*#__PURE__*/_jsxDEV(Payslip_ViewEarnings, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 564,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            md: 8,\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(CardLayout, {\n                title: \"Deductions\",\n                handleClick: handleDeductionsDialogOpen,\n                children: /*#__PURE__*/_jsxDEV(Payslip_ViewDeductions, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 574,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        className: classes.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n        isOpen: isEarningsDialogOpen,\n        handleClose: handleEarningsDialogClose,\n        title: \"\",\n        showButton: true,\n        isFullscreen: false,\n        isFullwidth: false,\n        children: /*#__PURE__*/_jsxDEV(Payslip_Earnings, {\n          setEarningsdata: setEarningsdata,\n          earningsdata: earningsdata,\n          oldEarningsdata: oldEarningsdata,\n          handleDialogClose: handleEarningsDialogClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomDialog, {\n        isOpen: isDeductionsDialogOpen,\n        handleClose: handleDeductionsDialogClose,\n        title: \"\",\n        showButton: true,\n        isFullscreen: false,\n        isFullwidth: false,\n        children: /*#__PURE__*/_jsxDEV(Payslip_Deductions, {\n          setDeductionsdata: setDeductionsdata,\n          deductionsdata: deductionsdata,\n          oldDeductionsdata: oldDeductionsdata,\n          handleDialogClose: handleDeductionsDialogClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PayslipForm, \"1EpJ8zhwuN18i/4hImdPBqDqyns=\", false, function () {\n  return [useHistory, useStyles, usePayslipsContext, useEmployeesContext, useTablesContext, useRecoilValue, useRecoilValue, useSetRecoilState, useSetRecoilState, useForm];\n});\n\n_c = PayslipForm;\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1)\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  iconSmall: {\n    fontSize: 20\n  },\n  root: {\n    padding: theme.spacing(3, 2)\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  divider: {\n    padding: 4\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 350\n  },\n  grid: {\n    padding: theme.spacing(3, 2) // justifyContent: \"center\",\n\n  },\n  box: {\n    height: 100,\n    display: \"flex\",\n    border: \"1px solid black\",\n    padding: 8\n  }\n}));\nexport default PayslipForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PayslipForm\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/PayslipForm.js"],"names":["React","useState","useReducer","useEffect","useRef","Button","Icon","TextField","Paper","Typography","Select","Divider","Grid","Toolbar","Box","makeStyles","CardLayout","CardLayout2","CustomDialog","MenuItem","Controller","useForm","useHistory","useSetRecoilState","useRecoilValue","payPeriodState","payPeriodEndMonthState","payPeriodEmpIdState","payEarningDataState","payDeductionDataState","useEmployeesContext","usePayslipsContext","useTablesContext","Payslip_ViewEarnings","Payslip_ViewDeductions","Payslip_Earnings","Payslip_Deductions","initial_values","name","period","date","bank_name","bank_acno","status","total_earnings","total_deductions","tap_amount","scp_amount","basic_pay","nett_pay","PayslipForm","history","calc","setCalc","classes","useStyles","isPayslipEditing","single_payslip","updatePayslip","addPayslip","editPayslipID","loadPayslips","getSinglePayslip","single_payslip_loading","single_payslip_error","payslip_period","payslip_earning_amount","payslip_deduction_amount","setPayslipEarningAmount","setPayslipDeductionAmount","payslipearnings","payslipdeductions","getSingleBatchPayslipEarnings","getSingleBatchPayslipDeductions","loadEmployees","employees","loadAllowances","loadDeductions","allowances","deductions","payPeriodEmpId","payPeriod","setPayEarningData","setPayDeductionData","earningsdata","setEarningsdata","oldEarningsdata","setOldEarningsdata","deductionsdata","setDeductionsdata","oldDeductionsdata","setOldDeductionsdata","isEarningsDialogOpen","setIsEarningsDialogOpen","isDeductionsDialogOpen","setIsDeductionsDialogOpen","handleSubmit","control","handleChange","event","calc_totals","totalTAP","Math","ceil","totalSCP","round","Number","EPSILON","totalEarnings","reduce","a","v","amount","totalDeductions","nettPay","id","console","log","onSubmit","data","rec_id","fields","handleEarningsDialogOpen","handleEarningsDialogClose","handleDeductionsDialogOpen","handleDeductionsDialogClose","push","root","button","rightIcon","divider","field","onChange","value","fieldState","error","textField","readOnly","required","shrink","e","parseInt","target","grid","theme","margin","spacing","leftIcon","marginRight","marginLeft","iconSmall","fontSize","padding","container","display","flexWrap","width","box","height","border"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,OAPF,EAQEC,IARF,EASEC,OATF,EAUEC,GAVF,QAWO,mBAXP;AAYA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,iBAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,QAAlD;AACA,SACEC,cADF,EAEEC,sBAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,qBALF,QAMO,iBANP;AAQA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,EADe;AAErBC,EAAAA,MAAM,EAAE,EAFa;AAGrBC,EAAAA,IAAI,EAAE,EAHe;AAIrBC,EAAAA,SAAS,EAAE,EAJU;AAKrBC,EAAAA,SAAS,EAAE,EALU;AAMrBC,EAAAA,MAAM,EAAE,SANa;AAOrBC,EAAAA,cAAc,EAAE,CAPK;AAQrBC,EAAAA,gBAAgB,EAAE,CARG;AASrBC,EAAAA,UAAU,EAAE,CATS;AAUrBC,EAAAA,UAAU,EAAE,CAVS;AAWrBC,EAAAA,SAAS,EAAE,CAXU;AAYrBC,EAAAA,QAAQ,EAAE;AAZW,CAAvB;;AAeA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,MAAIC,OAAO,GAAG7B,UAAU,EAAxB;AACA,QAAM,CAAC8B,IAAD,EAAOC,OAAP,IAAkBpD,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMqD,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA,sBARI;AASJC,IAAAA,oBATI;AAUJC,IAAAA,cAVI;AAWJC,IAAAA,sBAXI;AAYJC,IAAAA,wBAZI;AAaJC,IAAAA,uBAbI;AAcJC,IAAAA,yBAdI;AAeJC,IAAAA,eAfI;AAgBJC,IAAAA,iBAhBI;AAiBJC,IAAAA,6BAjBI;AAkBJC,IAAAA;AAlBI,MAmBF1C,kBAAkB,EAnBtB;AAoBA,QAAM;AAAE2C,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA+B7C,mBAAmB,EAAxD;AACA,QAAM;AAAE8C,IAAAA,cAAF;AAAkBC,IAAAA,cAAlB;AAAkCC,IAAAA,UAAlC;AAA8CC,IAAAA;AAA9C,MACJ/C,gBAAgB,EADlB;AAEA,QAAMgD,cAAc,GAAGxD,cAAc,CAACG,mBAAD,CAArC;AACA,QAAMsD,SAAS,GAAGzD,cAAc,CAACC,cAAD,CAAhC;AACA,QAAMyD,iBAAiB,GAAG3D,iBAAiB,CAACK,mBAAD,CAA3C;AACA,QAAMuD,mBAAmB,GAAG5D,iBAAiB,CAACM,qBAAD,CAA7C;AACA,QAAM,CAACuD,YAAD,EAAeC,eAAf,IAAkCpF,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqF,eAAD,EAAkBC,kBAAlB,IAAwCtF,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACuF,cAAD,EAAiBC,iBAAjB,IAAsCxF,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACyF,iBAAD,EAAoBC,oBAApB,IAA4C1F,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAAC2F,oBAAD,EAAuBC,uBAAvB,IAAkD5F,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM,CAAC6F,sBAAD,EAAyBC,yBAAzB,IAAsD9F,QAAQ,CAAC,KAAD,CAApE,CApCwB,CAqCxB;;AACA,QAAM;AAAE+F,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA4B5E,OAAO,EAAzC;AAEA,QAAM;AACJiB,IAAAA,IADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,gBARI;AASJC,IAAAA,UATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA,SAXI;AAYJC,IAAAA;AAZI,MAaFQ,cAbJ;AAeAtD,EAAAA,SAAS,CAAC,YAAY;AACpB2D,IAAAA,gBAAgB,CAACF,aAAD,CAAhB;AACD,GAFQ,EAEN,EAFM,CAAT,CAvDwB,CA2DxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMsC,YAAY,GAAIC,KAAD,IAAW,CAC9B;AACA;AACA;AACA;AACA;AACA;AACD,GAPD;;AASA,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUvD,SAAS,GAAG,IAAtB,CAAjB;AACA,UAAMwD,QAAQ,GACZF,IAAI,CAACG,KAAL,CAAW,CAACzD,SAAS,GAAG0D,MAAM,CAACC,OAApB,IAA+B,KAA/B,GAAuC,GAAlD,IAAyD,GAD3D;AAEA,UAAMC,aAAa,GAAGtC,eAAe,CAACuC,MAAhB,CACpB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGA,CAAC,GAAGC,CAAC,CAACC,MADD,EAEpB,CAFoB,CAAtB;AAIA,UAAMC,eAAe,GAAG1C,iBAAiB,CAACsC,MAAlB,CACtB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGA,CAAC,GAAGC,CAAC,CAACC,MADC,EAEtB,CAFsB,CAAxB;AAIA,UAAME,OAAO,GACXlE,SAAS,GAAG4D,aAAZ,GAA4BK,eAA5B,GAA8CZ,QAA9C,GAAyDG,QAD3D;AAEApC,IAAAA,uBAAuB,CAACwC,aAAD,CAAvB;AACAvC,IAAAA,yBAAyB,CAAC4C,eAAD,CAAzB;AACAvD,IAAAA,aAAa,CAAC;AACZyD,MAAAA,EAAE,EAAEvD,aADQ;AAEZhB,MAAAA,cAAc,EAAEgE,aAFJ;AAGZ/D,MAAAA,gBAAgB,EAAEoE,eAHN;AAIZnE,MAAAA,UAAU,EAAEuD,QAJA;AAKZtD,MAAAA,UAAU,EAAEyD,QALA;AAMZvD,MAAAA,QAAQ,EAAEiE;AANE,KAAD,CAAb;AAQAE,IAAAA,OAAO,CAACC,GAAR,CACE,OADF,EAEET,aAFF,EAGEK,eAHF,EAIEZ,QAJF,EAKEG,QALF,EAMEU,OANF;AAQApD,IAAAA,gBAAgB,CAACF,aAAD,CAAhB;AACD,GAjCD;;AAmCA,QAAM0D,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAM;AAAEC,MAAAA,MAAF;AAAU,SAAGC;AAAb,QAAwBhE,cAA9B;AACAC,IAAAA,aAAa,CAAC,GAAG+D,MAAJ,CAAb,CAFyB,CAIzB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAXD;;AAYA,QAAMC,wBAAwB,GAAG,MAAM;AACrC;AACAnC,IAAAA,kBAAkB,CAAC,CAAC,GAAGjB,eAAJ,CAAD,CAAlB;AACAe,IAAAA,eAAe,CAAC,CAAC,GAAGf,eAAJ,CAAD,CAAf;AACAuB,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACD,GALD;;AAOA,QAAM8B,yBAAyB,GAAG,MAAM;AACtC9B,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACArB,IAAAA,6BAA6B,CAACQ,cAAD,EAAiBC,SAAjB,CAA7B;AACD,GAHD;;AAIA,QAAM2C,0BAA0B,GAAG,MAAM;AACvCjC,IAAAA,oBAAoB,CAAC,CAAC,GAAGpB,iBAAJ,CAAD,CAApB;AACAkB,IAAAA,iBAAiB,CAAC,CAAC,GAAGlB,iBAAJ,CAAD,CAAjB;AACAwB,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GAJD;;AAMA,QAAM8B,2BAA2B,GAAG,MAAM;AACxC9B,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAtB,IAAAA,+BAA+B,CAACO,cAAD,EAAiBC,SAAjB,CAA/B;AACD,GAHD;;AAKA,MAAIlB,sBAAJ,EAA4B;AAC1B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIC,oBAAJ,EAA0B;AACxBb,IAAAA,OAAO,CAAC2E,IAAR,CAAa,QAAb;AACD;;AACD,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAExE,OAAO,CAACyE,IAA1B;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,EAAV;AAAc,QAAA,EAAE,EAAE,CAAlB;AAAqB,QAAA,EAAE,EAAE,EAAzB;AAAA,+BACE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAC,kBAAnB;AAAA,iCACE;AAAM,YAAA,QAAQ,EAAE/B,YAAY,CAACsB,QAAD,CAA5B;AAAA,oCACE,QAAC,IAAD;AAAA,qCACE;AAAA,wCACE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,IAApB;AAAyB,kBAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,QAAC,UAAD;AAAY,kBAAA,SAAS,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,eAME,QAAC,MAAD;AACE,kBAAA,IAAI,EAAC,QADP;AAEE,kBAAA,OAAO,EAAC,WAFV;AAGE,kBAAA,KAAK,EAAC,SAHR;AAIE,kBAAA,SAAS,EAAEhE,OAAO,CAAC0E,MAJrB;AAAA,qDAMS,QAAC,IAAD;AAAM,oBAAA,SAAS,EAAE1E,OAAO,CAAC2E,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANT;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAkBE,QAAC,OAAD;AAAS,cAAA,SAAS,EAAE3E,OAAO,CAAC4E;AAA5B;AAAA;AAAA;AAAA;AAAA,oBAlBF,eAmBE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAA,sCACE;AAAA,uCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,MADP;AAEE,kBAAA,OAAO,EAAEjC,OAFX;AAGE,kBAAA,YAAY,EAAE3D,IAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACP6F,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,MADR;AAEE,sBAAA,EAAE,EAAC,eAFL;AAGE,sBAAA,IAAI,EAAC,MAHP;AAIE,sBAAA,YAAY,EAAEjG,IAJhB;AAKE,sBAAA,SAAS,EAAEgB,OAAO,CAACkF,SALrB;AAME,sBAAA,QAAQ,EAAEtC,YANZ;AAOE,sBAAA,UAAU,EAAE;AACVuC,wBAAAA,QAAQ,EAAE;AADA;AAPd;AAAA;AAAA;AAAA;AAAA,4BADF;AAqBD,mBA7BH;AA8BE,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,QAAQ,EAAE;AAAZ;AA9BT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAmCE;AAAA,wCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,QADP;AAEE,kBAAA,OAAO,EAAEzC,OAFX;AAGE,kBAAA,YAAY,EAAE1D,MAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACP4F,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,QADR;AAEE,sBAAA,EAAE,EAAC,eAFL;AAGE,sBAAA,IAAI,EAAC,QAHP;AAIE,sBAAA,YAAY,EAAEhG,MAJhB;AAKE,sBAAA,SAAS,EAAEe,OAAO,CAACkF,SALrB;AAME,sBAAA,QAAQ,EAAEtC,YANZ;AAOE,sBAAA,UAAU,EAAE;AACVuC,wBAAAA,QAAQ,EAAE;AADA;AAPd;AAAA;AAAA;AAAA;AAAA,4BADF;AAaD,mBArBH,CAsBE;;AAtBF;AAAA;AAAA;AAAA;AAAA,wBADF,eAyBE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,MADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEzD,IAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACP2F,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,MADR;AAEE,sBAAA,IAAI,EAAC,MAFP;AAGE,sBAAA,EAAE,EAAC,eAHL;AAIE,sBAAA,IAAI,EAAC,MAJP;AAKE,sBAAA,YAAY,EAAE/F,IALhB;AAME,sBAAA,SAAS,EAAEc,OAAO,CAACkF,SANrB;AAOE,sBAAA,QAAQ,EAAEtC,YAPZ;AAQE,sBAAA,eAAe,EAAE;AACfyC,wBAAAA,MAAM,EAAE;AADO;AARnB;AAAA;AAAA;AAAA;AAAA,4BADF;AAcD,mBAtBH,CAuBE;;AAvBF;AAAA;AAAA;AAAA;AAAA,wBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnCF,eAsFE;AAAA,wCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,WADP;AAEE,kBAAA,OAAO,EAAE1C,OAFX;AAGE,kBAAA,YAAY,EAAExD,SAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACP0F,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,WADR;AAEE,sBAAA,EAAE,EAAC,eAFL;AAGE,sBAAA,IAAI,EAAC,WAHP;AAIE,sBAAA,YAAY,EAAE9F,SAJhB;AAKE,sBAAA,SAAS,EAAEa,OAAO,CAACkF,SALrB;AAME,sBAAA,QAAQ,EAAEtC,YANZ;AAOE,sBAAA,UAAU,EAAE;AACVuC,wBAAAA,QAAQ,EAAE;AADA;AAPd;AAAA;AAAA;AAAA;AAAA,4BADF;AAaD,mBArBH,CAsBE;;AAtBF;AAAA;AAAA;AAAA;AAAA,wBADF,eAyBE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,WADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEvD,SAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPyF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,YADR;AAEE,sBAAA,EAAE,EAAC,eAFL;AAGE,sBAAA,IAAI,EAAC,WAHP;AAIE,sBAAA,KAAK,EAAE7F,SAJT;AAKE,sBAAA,SAAS,EAAEY,OAAO,CAACkF,SALrB;AAME,sBAAA,QAAQ,EAAEtC,YANZ;AAOE,sBAAA,UAAU,EAAE;AACVuC,wBAAAA,QAAQ,EAAE;AADA;AAPd;AAAA;AAAA;AAAA;AAAA,4BADF;AAaD,mBArBH,CAsBE;;AAtBF;AAAA;AAAA;AAAA;AAAA,wBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtFF,eAwIE;AAAA,wCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,YADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEnD,UAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPqF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,kBADR;AAEE,sBAAA,IAAI,EAAC,UAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,YAJP;AAKE,sBAAA,YAAY,EAAEzF,UALhB;AAME,sBAAA,SAAS,EAAEQ,OAAO,CAACkF,SANrB,CAOE;AAPF;AAQE,sBAAA,QAAQ,EAAGI,CAAD,IAAO;AACf1C,wBAAAA,YAAY,CAAC2C,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,EAAiB,EAAjB,CAAT,CAAZ;AACD,uBAVH;AAWE,sBAAA,UAAU,EAAE;AACVI,wBAAAA,QAAQ,EAAE;AADA;AAXd;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBADF,eA6BE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,YADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAElD,UAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPoF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,kBADR;AAEE,sBAAA,IAAI,EAAC,UAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,YAJP;AAKE,sBAAA,YAAY,EAAExF,UALhB;AAME,sBAAA,SAAS,EAAEO,OAAO,CAACkF,SANrB,CAOE;AAPF;AAQE,sBAAA,QAAQ,EAAGI,CAAD,IAAO;AACf1C,wBAAAA,YAAY,CAAC2C,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,EAAiB,EAAjB,CAAT,CAAZ;AACD,uBAVH;AAWE,sBAAA,UAAU,EAAE;AACVI,wBAAAA,QAAQ,EAAE;AADA;AAXd;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAxIF,eAkME;AAAA,wCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,gBADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAErD,cAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPuF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,gBADR;AAEE,sBAAA,IAAI,EAAC,QAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,gBAJP;AAKE,sBAAA,KAAK,EAAE3F,cALT;AAME,sBAAA,SAAS,EAAEU,OAAO,CAACkF,SANrB,CAOE;AAPF;AAQE,sBAAA,QAAQ,EAAGI,CAAD,IAAO;AACf1C,wBAAAA,YAAY,CAAC2C,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,EAAiB,EAAjB,CAAT,CAAZ;AACD,uBAVH;AAWE,sBAAA,UAAU,EAAE;AACVI,wBAAAA,QAAQ,EAAE;AADA;AAXd;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBADF,eA6BE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,kBADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEpD,gBAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPsF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,kBADR;AAEE,sBAAA,IAAI,EAAC,QAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,kBAJP;AAKE,sBAAA,KAAK,EAAE1F,gBALT;AAME,sBAAA,SAAS,EAAES,OAAO,CAACkF,SANrB,CAOE;AAPF;AAQE,sBAAA,QAAQ,EAAGI,CAAD,IAAO;AACf1C,wBAAAA,YAAY,CAAC2C,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,EAAiB,EAAjB,CAAT,CAAZ;AACD,uBAVH;AAWE,sBAAA,UAAU,EAAE;AACVI,wBAAAA,QAAQ,EAAE;AADA;AAXd;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlMF,eA4PE;AAAA,wCACE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,WADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEjD,SAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPmF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,WADR;AAEE,sBAAA,IAAI,EAAC,QAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,WAJP;AAKE,sBAAA,KAAK,EAAEvF,SALT;AAME,sBAAA,SAAS,EAAEM,OAAO,CAACkF,SANrB;AAOE,sBAAA,QAAQ,EAAEtC,YAPZ;AAQE,sBAAA,UAAU,EAAE;AACVuC,wBAAAA,QAAQ,EAAE;AADA,uBARd,CAWE;AACA;AACA;;AAbF;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBADF,eA6BE,QAAC,UAAD;AACE,kBAAA,IAAI,EAAC,UADP;AAEE,kBAAA,OAAO,EAAExC,OAFX;AAGE,kBAAA,YAAY,EAAEhD,QAHhB;AAIE,kBAAA,MAAM,EAAE,CAAC;AACPkF,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,QAAF;AAAYC,sBAAAA;AAAZ,qBADA;AAEPC,oBAAAA,UAAU,EAAE;AAAEC,sBAAAA;AAAF;AAFL,mBAAD,KAGF;AACJ,wCACE,QAAC,SAAD;AACE,sBAAA,KAAK,EAAC,UADR;AAEE,sBAAA,IAAI,EAAC,QAFP;AAGE,sBAAA,EAAE,EAAC,iBAHL;AAIE,sBAAA,IAAI,EAAC,UAJP;AAKE,sBAAA,KAAK,EAAEtF,QALT;AAME,sBAAA,SAAS,EAAEK,OAAO,CAACkF,SANrB,CAOE;AAPF;AAQE,sBAAA,QAAQ,EAAGI,CAAD,IAAO;AACf1C,wBAAAA,YAAY,CAAC2C,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,EAAiB,EAAjB,CAAT,CAAZ;AACD,uBAVH;AAWE,sBAAA,UAAU,EAAE;AACVI,wBAAAA,QAAQ,EAAE;AADA;AAXd;AAAA;AAAA;AAAA;AAAA,4BADF;AAiBD,mBAzBH,CA0BE;;AA1BF;AAAA;AAAA;AAAA;AAAA,wBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5PF,eAuTE,QAAC,MAAD;AACE,gBAAA,IAAI,EAAC,QADP;AAEE,gBAAA,OAAO,EAAC,WAFV;AAGE,gBAAA,KAAK,EAAC,SAHR;AAIE,gBAAA,SAAS,EAAEnF,OAAO,CAAC0E,MAJrB;AAKE,gBAAA,OAAO,EAAE5B,WALX;AAAA,iDAOO,QAAC,IAAD;AAAM,kBAAA,SAAS,EAAE9C,OAAO,CAAC2E,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPP;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvTF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnBF,eAoVE,QAAC,OAAD;AAAS,cAAA,SAAS,EAAE3E,OAAO,CAAC4E;AAA5B;AAAA;AAAA;AAAA;AAAA,oBApVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA2VE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,UAAU,EAAC,QAA3B;AAAoC,UAAA,SAAS,EAAE5E,OAAO,CAACyF,IAAvD;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,CAAtB;AAAyB,YAAA,EAAE,EAAE,CAA7B;AAAA,mCACE;AAAA,qCACE,QAAC,UAAD;AACE,gBAAA,KAAK,EAAC,UADR;AAEE,gBAAA,WAAW,EAAErB,wBAFf;AAAA,uCAIE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,CAAtB;AAAyB,YAAA,EAAE,EAAE,CAA7B;AAAA,mCACE;AAAA,qCACE,QAAC,UAAD;AACE,gBAAA,KAAK,EAAC,YADR;AAEE,gBAAA,WAAW,EAAEE,0BAFf;AAAA,uCAIE,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3VF,eAmXE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAEtE,OAAO,CAAC4E;AAA5B;AAAA;AAAA;AAAA;AAAA,cAnXF,eAoXE,QAAC,YAAD;AACE,QAAA,MAAM,EAAEtC,oBADV;AAEE,QAAA,WAAW,EAAE+B,yBAFf;AAGE,QAAA,KAAK,EAAC,EAHR;AAIE,QAAA,UAAU,EAAE,IAJd;AAKE,QAAA,YAAY,EAAE,KALhB;AAME,QAAA,WAAW,EAAE,KANf;AAAA,+BAQE,QAAC,gBAAD;AACE,UAAA,eAAe,EAAEtC,eADnB;AAEE,UAAA,YAAY,EAAED,YAFhB;AAGE,UAAA,eAAe,EAAEE,eAHnB;AAIE,UAAA,iBAAiB,EAAEqC;AAJrB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,cApXF,eAmYE,QAAC,YAAD;AACE,QAAA,MAAM,EAAE7B,sBADV;AAEE,QAAA,WAAW,EAAE+B,2BAFf;AAGE,QAAA,KAAK,EAAC,EAHR;AAIE,QAAA,UAAU,EAAE,IAJd;AAKE,QAAA,YAAY,EAAE,KALhB;AAME,QAAA,WAAW,EAAE,KANf;AAAA,+BAQE,QAAC,kBAAD;AACE,UAAA,iBAAiB,EAAEpC,iBADrB;AAEE,UAAA,cAAc,EAAED,cAFlB;AAGE,UAAA,iBAAiB,EAAEE,iBAHrB;AAIE,UAAA,iBAAiB,EAAEmC;AAJrB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,cAnYF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuZD,CAjjBD;;GAAM3E,W;UACU5B,U,EAEEiC,S,EAoBZxB,kB,EACiCD,mB,EAEnCE,gB,EACqBR,c,EACLA,c,EACQD,iB,EACEA,iB,EAQMF,O;;;KAtC9B6B,W;AAmjBN,MAAMK,SAAS,GAAGxC,UAAU,CAAEiI,KAAD,KAAY;AACvChB,EAAAA,MAAM,EAAE;AACNiB,IAAAA,MAAM,EAAED,KAAK,CAACE,OAAN,CAAc,CAAd;AADF,GAD+B;AAIvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAEJ,KAAK,CAACE,OAAN,CAAc,CAAd;AADL,GAJ6B;AAOvCjB,EAAAA,SAAS,EAAE;AACToB,IAAAA,UAAU,EAAEL,KAAK,CAACE,OAAN,CAAc,CAAd;AADH,GAP4B;AAUvCI,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE;AADD,GAV4B;AAavCxB,EAAAA,IAAI,EAAE;AACJyB,IAAAA,OAAO,EAAER,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiB,CAAjB;AADL,GAbiC;AAgBvCO,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GAhB4B;AAoBvCzB,EAAAA,OAAO,EAAE;AACPsB,IAAAA,OAAO,EAAE;AADF,GApB8B;AAuBvChB,EAAAA,SAAS,EAAE;AACTa,IAAAA,UAAU,EAAEL,KAAK,CAACE,OAAN,CAAc,CAAd,CADH;AAETE,IAAAA,WAAW,EAAEJ,KAAK,CAACE,OAAN,CAAc,CAAd,CAFJ;AAGTU,IAAAA,KAAK,EAAE;AAHE,GAvB4B;AA4BvCb,EAAAA,IAAI,EAAE;AACJS,IAAAA,OAAO,EAAER,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiB,CAAjB,CADL,CAEJ;;AAFI,GA5BiC;AAgCvCW,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAE,GADL;AAEHJ,IAAAA,OAAO,EAAE,MAFN;AAGHK,IAAAA,MAAM,EAAE,iBAHL;AAIHP,IAAAA,OAAO,EAAE;AAJN;AAhCkC,CAAZ,CAAD,CAA5B;AAwCA,eAAetG,WAAf","sourcesContent":["import React, { useState, useReducer, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  TextField,\r\n  Paper,\r\n  Typography,\r\n  Select,\r\n  Divider,\r\n  Grid,\r\n  Toolbar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardLayout from \"../helpers/CardLayout\";\r\nimport CardLayout2 from \"../helpers/CardLayout2\";\r\nimport { CustomDialog } from \"../helpers/CustomDialog\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n  payEarningDataState,\r\n  payDeductionDataState,\r\n} from \"./data/atomdata\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport Payslip_ViewEarnings from \"./Payslip_ViewEarnings\";\r\nimport Payslip_ViewDeductions from \"./Payslip_ViewDeductions\";\r\nimport Payslip_Earnings from \"./Payslip_Earnings\";\r\nimport Payslip_Deductions from \"./Payslip_Deductions\";\r\n\r\nconst initial_values = {\r\n  name: \"\",\r\n  period: \"\",\r\n  date: \"\",\r\n  bank_name: \"\",\r\n  bank_acno: \"\",\r\n  status: \"Pending\",\r\n  total_earnings: 0,\r\n  total_deductions: 0,\r\n  tap_amount: 0,\r\n  scp_amount: 0,\r\n  basic_pay: 0,\r\n  nett_pay: 0,\r\n};\r\n\r\nconst PayslipForm = () => {\r\n  let history = useHistory();\r\n  const [calc, setCalc] = useState(false);\r\n  const classes = useStyles();\r\n  const {\r\n    isPayslipEditing,\r\n    single_payslip,\r\n    updatePayslip,\r\n    addPayslip,\r\n    editPayslipID,\r\n    loadPayslips,\r\n    getSinglePayslip,\r\n    single_payslip_loading,\r\n    single_payslip_error,\r\n    payslip_period,\r\n    payslip_earning_amount,\r\n    payslip_deduction_amount,\r\n    setPayslipEarningAmount,\r\n    setPayslipDeductionAmount,\r\n    payslipearnings,\r\n    payslipdeductions,\r\n    getSingleBatchPayslipEarnings,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { loadAllowances, loadDeductions, allowances, deductions } =\r\n    useTablesContext();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const setPayEarningData = useSetRecoilState(payEarningDataState);\r\n  const setPayDeductionData = useSetRecoilState(payDeductionDataState);\r\n  const [earningsdata, setEarningsdata] = useState([]);\r\n  const [oldEarningsdata, setOldEarningsdata] = useState([]);\r\n  const [deductionsdata, setDeductionsdata] = useState([]);\r\n  const [oldDeductionsdata, setOldDeductionsdata] = useState([]);\r\n  const [isEarningsDialogOpen, setIsEarningsDialogOpen] = useState(false);\r\n  const [isDeductionsDialogOpen, setIsDeductionsDialogOpen] = useState(false);\r\n  //const [state, setState] = useState(single_payslip);\r\n  const { handleSubmit, control } = useForm();\r\n\r\n  const {\r\n    name,\r\n    period,\r\n    date,\r\n    bank_name,\r\n    bank_acno,\r\n    status,\r\n    total_earnings,\r\n    total_deductions,\r\n    tap_amount,\r\n    scp_amount,\r\n    basic_pay,\r\n    nett_pay,\r\n  } = single_payslip;\r\n\r\n  useEffect(async () => {\r\n    getSinglePayslip(editPayslipID);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (calc) {\r\n  //     setTimeout(() => {\r\n  //       console.log(\"calc\");\r\n  //       calc_totals();\r\n  //       setCalc(false);\r\n  //     }, 10000);\r\n  //   }\r\n  // }, [calc]);\r\n\r\n  const handleChange = (event) => {\r\n    //const { rec_id, ...fields } = single_payslip;\r\n    // const value =\r\n    //   event.target.type === \"number\"\r\n    //     ? parseInt(event.target.value, 10)\r\n    //     : event.target.value;\r\n    // setState({ ...state, [event.target.name]: value });\r\n  };\r\n\r\n  const calc_totals = () => {\r\n    const totalTAP = Math.ceil(basic_pay * 0.05);\r\n    const totalSCP =\r\n      Math.round((basic_pay + Number.EPSILON) * 0.035 * 100) / 100;\r\n    const totalEarnings = payslipearnings.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const totalDeductions = payslipdeductions.reduce(\r\n      (a, v) => (a = a + v.amount),\r\n      0\r\n    );\r\n    const nettPay =\r\n      basic_pay + totalEarnings - totalDeductions - totalTAP - totalSCP;\r\n    setPayslipEarningAmount(totalEarnings);\r\n    setPayslipDeductionAmount(totalDeductions);\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: totalEarnings,\r\n      total_deductions: totalDeductions,\r\n      tap_amount: totalTAP,\r\n      scp_amount: totalSCP,\r\n      nett_pay: nettPay,\r\n    });\r\n    console.log(\r\n      \"total\",\r\n      totalEarnings,\r\n      totalDeductions,\r\n      totalTAP,\r\n      totalSCP,\r\n      nettPay\r\n    );\r\n    getSinglePayslip(editPayslipID);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    const { rec_id, ...fields } = single_payslip;\r\n    updatePayslip(...fields);\r\n\r\n    // if (isPayslipEditing) {\r\n    //   updatePayslip({ id: editPayslipID, ...data });\r\n    // } else {\r\n    //   addPayslip({ ...data });\r\n    // }\r\n    // loadPayslips();\r\n    // history.push(\"/batchpayslips\");\r\n  };\r\n  const handleEarningsDialogOpen = () => {\r\n    // setPayEarningData([...payslipearnings]);\r\n    setOldEarningsdata([...payslipearnings]);\r\n    setEarningsdata([...payslipearnings]);\r\n    setIsEarningsDialogOpen(true);\r\n  };\r\n\r\n  const handleEarningsDialogClose = () => {\r\n    setIsEarningsDialogOpen(false);\r\n    getSingleBatchPayslipEarnings(payPeriodEmpId, payPeriod);\r\n  };\r\n  const handleDeductionsDialogOpen = () => {\r\n    setOldDeductionsdata([...payslipdeductions]);\r\n    setDeductionsdata([...payslipdeductions]);\r\n    setIsDeductionsDialogOpen(true);\r\n  };\r\n\r\n  const handleDeductionsDialogClose = () => {\r\n    setIsDeductionsDialogOpen(false);\r\n    getSingleBatchPayslipDeductions(payPeriodEmpId, payPeriod);\r\n  };\r\n\r\n  if (single_payslip_loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (single_payslip_error) {\r\n    history.push(\"/error\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Grid xs={12} md={8} lg={12}>\r\n          <CardLayout2 title=\"Employee Profile\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid>\r\n                <div>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    PAYSLIP FORM\r\n                  </Typography>\r\n                  <Typography component=\"p\">Payslip Preparation</Typography>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n              <Grid item xs={12}>\r\n                <div>\r\n                  <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    defaultValue={name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"name\"\r\n                          defaultValue={name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        >\r\n                          {/* {employees.map((e) => {\r\n                  return (\r\n                    <MenuItem key={e.name} value={e.name}>\r\n                      {e.name}\r\n                    </MenuItem>\r\n                  );\r\n                })} */}\r\n                        </TextField>\r\n                      );\r\n                    }}\r\n                    rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"period\"\r\n                    control={control}\r\n                    defaultValue={period}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Period\"\r\n                          id=\"margin-normal\"\r\n                          name=\"period\"\r\n                          defaultValue={period}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"date\"\r\n                    control={control}\r\n                    defaultValue={date}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Date\"\r\n                          type=\"date\"\r\n                          id=\"margin-normal\"\r\n                          name=\"date\"\r\n                          defaultValue={date}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"bank_name\"\r\n                    control={control}\r\n                    defaultValue={bank_name}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank Name\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_name\"\r\n                          defaultValue={bank_name}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"bank_acno\"\r\n                    control={control}\r\n                    defaultValue={bank_acno}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Bank AC No\"\r\n                          id=\"margin-normal\"\r\n                          name=\"bank_acno\"\r\n                          value={bank_acno}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"tap_amount\"\r\n                    control={control}\r\n                    defaultValue={tap_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"TAP Contrinution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"tap_amount\"\r\n                          defaultValue={tap_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"scp_amount\"\r\n                    control={control}\r\n                    defaultValue={scp_amount}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"SCP Contribution\"\r\n                          type=\"currency\"\r\n                          id=\"standard-number\"\r\n                          name=\"scp_amount\"\r\n                          defaultValue={scp_amount}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"total_earnings\"\r\n                    control={control}\r\n                    defaultValue={total_earnings}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Earnings\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_earnings\"\r\n                          value={total_earnings}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"total_deductions\"\r\n                    control={control}\r\n                    defaultValue={total_deductions}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Total Deductions\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"total_deductions\"\r\n                          value={total_deductions}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Controller\r\n                    name=\"basic_pay\"\r\n                    control={control}\r\n                    defaultValue={basic_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Basic Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"basic_pay\"\r\n                          value={basic_pay}\r\n                          className={classes.textField}\r\n                          onChange={handleChange}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                          // onChange={(e) => {\r\n                          //   handleChange(parseInt(e.target.value, 10));\r\n                          // }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                  <Controller\r\n                    name=\"nett_pay\"\r\n                    control={control}\r\n                    defaultValue={nett_pay}\r\n                    render={({\r\n                      field: { onChange, value },\r\n                      fieldState: { error },\r\n                    }) => {\r\n                      return (\r\n                        <TextField\r\n                          label=\"Nett Pay\"\r\n                          type=\"number\"\r\n                          id=\"standard-number\"\r\n                          name=\"nett_pay\"\r\n                          value={nett_pay}\r\n                          className={classes.textField}\r\n                          //onChange={onChange}\r\n                          onChange={(e) => {\r\n                            handleChange(parseInt(e.target.value, 10));\r\n                          }}\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        ></TextField>\r\n                      );\r\n                    }}\r\n                    //rules={{ required: \"Name required\" }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  onClick={calc_totals}\r\n                >\r\n                  Calc <Icon className={classes.rightIcon}>send</Icon>\r\n                </Button>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </form>\r\n          </CardLayout2>\r\n        </Grid>\r\n        <div>\r\n          <Grid container alignItems=\"center\" className={classes.grid}>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Earnings\"\r\n                  handleClick={handleEarningsDialogOpen}\r\n                >\r\n                  <Payslip_ViewEarnings />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={6} md={8} lg={6}>\r\n              <div>\r\n                <CardLayout\r\n                  title=\"Deductions\"\r\n                  handleClick={handleDeductionsDialogOpen}\r\n                >\r\n                  <Payslip_ViewDeductions />\r\n                </CardLayout>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <Divider className={classes.divider} />\r\n        <CustomDialog\r\n          isOpen={isEarningsDialogOpen}\r\n          handleClose={handleEarningsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Earnings\r\n            setEarningsdata={setEarningsdata}\r\n            earningsdata={earningsdata}\r\n            oldEarningsdata={oldEarningsdata}\r\n            handleDialogClose={handleEarningsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n        <CustomDialog\r\n          isOpen={isDeductionsDialogOpen}\r\n          handleClose={handleDeductionsDialogClose}\r\n          title=\"\"\r\n          showButton={true}\r\n          isFullscreen={false}\r\n          isFullwidth={false}\r\n        >\r\n          <Payslip_Deductions\r\n            setDeductionsdata={setDeductionsdata}\r\n            deductionsdata={deductionsdata}\r\n            oldDeductionsdata={oldDeductionsdata}\r\n            handleDialogClose={handleDeductionsDialogClose}\r\n          />\r\n        </CustomDialog>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  divider: {\r\n    padding: 4,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 350,\r\n  },\r\n  grid: {\r\n    padding: theme.spacing(3, 2),\r\n    // justifyContent: \"center\",\r\n  },\r\n  box: {\r\n    height: 100,\r\n    display: \"flex\",\r\n    border: \"1px solid black\",\r\n    padding: 8,\r\n  },\r\n}));\r\n\r\nexport default PayslipForm;\r\n"]},"metadata":{},"sourceType":"module"}