{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable-july2\\\\src\\\\components\\\\EmpExperiences.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { Button, Icon, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { useExperiences } from \"./educations/useExperiences\";\nimport { useUpdateExperiences } from \"./educations/useUpdateExperiences\";\nimport { useAddExperiences } from \"./educations/useAddExperiences\";\nimport { useDeleteExperiences } from \"./educations/useDeleteExperiences\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Company\",\n  field: \"company\"\n}, {\n  title: \"Location\",\n  field: \"location\"\n}, {\n  title: \"Position\",\n  field: \"position\"\n}, {\n  title: \"From Date\",\n  field: \"from_date\",\n  type: \"date\",\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || new Date()}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    type: \"date\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"To Date\",\n  field: \"to_date\",\n  type: \"date\",\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || new Date()}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    type: \"date\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"Remark\",\n  field: \"remark\"\n}];\nexport default function Emp_Experiences({\n  experiencedata,\n  setExperiencedata,\n  handleDialogClose\n}) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    experiences,\n    setExperienceId\n  } = useExperiences();\n  const updateExperiences = useUpdateExperiences();\n  const addExperiences = useAddExperiences();\n  const deleteExperiences = useDeleteExperiences();\n  const {\n    editEmployeeID\n  } = useEmployeesContext();\n  const {\n    loadSingleBatchExperience,\n    singlebatchexperience,\n    //addExperience,\n    //deleteExperience,\n    //updateExperience,\n    singlebatch_experience_loading\n  } = useTablesContext();\n  useEffect(() => {\n    setExperienceId(editEmployeeID);\n  }, []);\n\n  const update_Experience = data => {\n    const {\n      id,\n      rec_id,\n      tableData,\n      ...fields\n    } = data;\n    updateExperiences({\n      id,\n      ...fields\n    });\n  };\n\n  const add_Experience = data => {\n    addExperiences({ ...data,\n      empid: editEmployeeID\n    });\n  };\n\n  const delete_Experience = data => {\n    const {\n      id\n    } = data;\n    deleteExperiences(id);\n  };\n\n  const Refresh_Data = () => {\n    loadSingleBatchExperience(editEmployeeID);\n  };\n\n  if (singlebatch_experience_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...Experience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: singlebatchexperience,\n        title: \"Experience\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              add_Experience(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // const dataUpdate = [...experiencedata];\n              // const index = oldData.tableData.id;\n              // dataUpdate[index] = newData;\n              // setExperiencedata([...dataUpdate]);\n              update_Experience(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // const dataDelete = [...experiencedata];\n              // const index = oldData.tableData.id;\n              // dataDelete.splice(index, 1);\n              // setExperiencedata([...dataDelete]);\n              delete_Experience(oldData);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: Refresh_Data,\n                children: [\"Refresh \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Emp_Experiences, \"n6PEKS1eI+f3G1h3cinyspDFi08=\", false, function () {\n  return [useStyles, useExperiences, useUpdateExperiences, useAddExperiences, useDeleteExperiences, useEmployeesContext, useTablesContext];\n});\n\n_c = Emp_Experiences;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Emp_Experiences\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/EmpExperiences.js"],"names":["React","useEffect","MaterialTable","MTableToolbar","Button","Icon","TextField","makeStyles","useEmployeesContext","useTablesContext","useExperiences","useUpdateExperiences","useAddExperiences","useDeleteExperiences","columns","title","field","type","editComponent","props","e","onChange","target","value","Emp_Experiences","experiencedata","setExperiencedata","handleDialogClose","classes","useStyles","experiences","setExperienceId","updateExperiences","addExperiences","deleteExperiences","editEmployeeID","loadSingleBatchExperience","singlebatchexperience","singlebatch_experience_loading","update_Experience","data","id","rec_id","tableData","fields","add_Experience","empid","delete_Experience","Refresh_Data","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { Button, Icon, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\nimport { useExperiences } from \"./educations/useExperiences\";\r\nimport { useUpdateExperiences } from \"./educations/useUpdateExperiences\";\r\nimport { useAddExperiences } from \"./educations/useAddExperiences\";\r\nimport { useDeleteExperiences } from \"./educations/useDeleteExperiences\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  { title: \"Remark\", field: \"remark\" },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n   const { experiences, setExperienceId } = useExperiences();\r\n   const updateExperiences = useUpdateExperiences();\r\n   const addExperiences = useAddExperiences();\r\n   const deleteExperiences = useDeleteExperiences();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchExperience,\r\n    singlebatchexperience,\r\n    //addExperience,\r\n    //deleteExperience,\r\n    //updateExperience,\r\n    singlebatch_experience_loading,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n   setExperienceId(editEmployeeID)\r\n  }, []);\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, tableData, ...fields } = data;\r\n       updateExperiences({ id, ...fields });\r\n   \r\n  };\r\n\r\n  const add_Experience = (data) => {\r\n    addExperiences({ ...data, empid: editEmployeeID });\r\n   };\r\n\r\n  const delete_Experience = (data) => {\r\n    const { id } = data;\r\n    deleteExperiences(id);\r\n  };\r\n\r\n   const Refresh_Data = () => {\r\n     loadSingleBatchExperience(editEmployeeID);\r\n   };\r\n  if (singlebatch_experience_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Experience</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Experience(newData)\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataUpdate = [...experiencedata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataUpdate[index] = newData;\r\n                  // setExperiencedata([...dataUpdate]);\r\n                  update_Experience(newData)\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataDelete = [...experiencedata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataDelete.splice(index, 1);\r\n                  // setExperiencedata([...dataDelete]);\r\n                  delete_Experience(oldData)\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Refresh_Data}\r\n                  >\r\n                    Refresh <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}