{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable-july2\\\\src\\\\components\\\\EmpExperiences.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { Button, Icon, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Company\",\n  field: \"company\"\n}, {\n  title: \"Location\",\n  field: \"location\"\n}, {\n  title: \"Position\",\n  field: \"position\"\n}, {\n  title: \"From Date\",\n  field: \"from_date\",\n  type: \"date\",\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || new Date()}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    type: \"date\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"To Date\",\n  field: \"to_date\",\n  type: \"date\",\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || new Date()}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    type: \"date\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this)\n}, {\n  title: \"Remark\",\n  field: \"remark\"\n}];\nexport default function Emp_Experiences({\n  experiencedata,\n  setExperiencedata,\n  handleDialogClose\n}) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    editEmployeeID\n  } = useEmployeesContext();\n  const {\n    loadSingleBatchExperience,\n    singlebatchexperience,\n    addExperience,\n    deleteExperience,\n    updateExperience,\n    singlebatch_experience_loading\n  } = useTablesContext();\n  useEffect(() => {\n    loadSingleBatchExperience(editEmployeeID);\n  }, []);\n\n  const Save_ExperienceData = () => {\n    //console.log(experiencedata);\n    // delete unwanted data\n    singlebatchexperience.forEach(row => {\n      const {\n        id,\n        rec_id\n      } = row;\n      const res = experiencedata.find(r => r.rec_id === rec_id);\n\n      if (!res) {\n        deleteExperience(id);\n      }\n    }); //add or update new data\n\n    experiencedata.forEach(data => {\n      const {\n        id,\n        company,\n        location,\n        position,\n        from_date,\n        to_date,\n        remark\n      } = data;\n\n      if (id) {\n        const {\n          id,\n          rec_id,\n          tableData,\n          ...fields\n        } = data;\n        updateExperience({\n          id,\n          ...fields\n        });\n      } else {\n        addExperience({\n          company,\n          location,\n          position,\n          from_date,\n          to_date,\n          remark,\n          empid: editEmployeeID\n        });\n      }\n    });\n    loadSingleBatchExperience(editEmployeeID);\n    handleDialogClose();\n  };\n\n  const update_Experience = data => {\n    const {\n      id,\n      rec_id,\n      ...fields\n    } = data;\n    updateExperience({\n      id,\n      ...fields\n    });\n    loadSingleBatchExperience(editEmployeeID);\n  }; // const add_Experience = (data) => {\n  //   addExperience({ ...data, empid: editEmployeeID });\n  //   loadSingleBatchExperience(editEmployeeID);\n  // };\n  // const delete_Experience = (data) => {\n  //   const { id } = data;\n  //   deleteExperience(id);\n  //   loadSingleBatchExperience(editEmployeeID);\n  // };\n\n\n  if (singlebatch_experience_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...Experience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: singlebatchexperience,\n        title: \"Experience\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              setExperiencedata([...experiencedata, newData]);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // const dataUpdate = [...experiencedata];\n              // const index = oldData.tableData.id;\n              // dataUpdate[index] = newData;\n              // setExperiencedata([...dataUpdate]);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...experiencedata];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              setExperiencedata([...dataDelete]);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: Save_ExperienceData,\n                children: [\"Update \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 28\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Emp_Experiences, \"QXgQrJLgu/47RinClNBmpEd7+sQ=\", false, function () {\n  return [useStyles, useEmployeesContext, useTablesContext];\n});\n\n_c = Emp_Experiences;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Emp_Experiences\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable-july2/src/components/EmpExperiences.js"],"names":["React","useEffect","MaterialTable","MTableToolbar","Button","Icon","TextField","makeStyles","useEmployeesContext","useTablesContext","columns","title","field","type","editComponent","props","e","onChange","target","value","Emp_Experiences","experiencedata","setExperiencedata","handleDialogClose","classes","useStyles","editEmployeeID","loadSingleBatchExperience","singlebatchexperience","addExperience","deleteExperience","updateExperience","singlebatch_experience_loading","Save_ExperienceData","forEach","row","id","rec_id","res","find","r","data","company","location","position","from_date","to_date","remark","tableData","fields","empid","update_Experience","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","dataDelete","index","splice","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { Button, Icon, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || new Date()}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        type=\"date\"\r\n      />\r\n    ),\r\n  },\r\n  { title: \"Remark\", field: \"remark\" },\r\n];\r\n\r\nexport default function Emp_Experiences({\r\n  experiencedata,\r\n  setExperiencedata,\r\n  handleDialogClose,\r\n}) {\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchExperience,\r\n    singlebatchexperience,\r\n    addExperience,\r\n    deleteExperience,\r\n    updateExperience,\r\n    singlebatch_experience_loading,\r\n  } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  }, []);\r\n\r\n  const Save_ExperienceData = () => {\r\n    //console.log(experiencedata);\r\n    // delete unwanted data\r\n    singlebatchexperience.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = experiencedata.find((r) => r.rec_id === rec_id);\r\n      if (!res) {\r\n        deleteExperience(id);\r\n      }\r\n    });\r\n\r\n    //add or update new data\r\n    experiencedata.forEach((data) => {\r\n      const { id, company, location, position, from_date, to_date, remark } =\r\n        data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updateExperience({ id, ...fields });\r\n      } else {\r\n        addExperience({\r\n          company,\r\n          location,\r\n          position,\r\n          from_date,\r\n          to_date,\r\n          remark,\r\n          empid: editEmployeeID,\r\n        });\r\n      }\r\n    });\r\n\r\n    loadSingleBatchExperience(editEmployeeID);\r\n    handleDialogClose();\r\n  };\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateExperience({ id, ...fields });\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  };\r\n\r\n  // const add_Experience = (data) => {\r\n  //   addExperience({ ...data, empid: editEmployeeID });\r\n  //   loadSingleBatchExperience(editEmployeeID);\r\n  // };\r\n\r\n  // const delete_Experience = (data) => {\r\n  //   const { id } = data;\r\n  //   deleteExperience(id);\r\n  //   loadSingleBatchExperience(editEmployeeID);\r\n  // };\r\n\r\n  if (singlebatch_experience_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Experience</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setExperiencedata([...experiencedata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  // const dataUpdate = [...experiencedata];\r\n                  // const index = oldData.tableData.id;\r\n                  // dataUpdate[index] = newData;\r\n                  // setExperiencedata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...experiencedata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setExperiencedata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_ExperienceData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}