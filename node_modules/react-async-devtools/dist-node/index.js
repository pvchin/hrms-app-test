'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var reactAsync = require('react-async');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
const Root = props => React.createElement("div", _extends({}, props, {
  style: _objectSpread({
    position: "absolute",
    top: "1em",
    right: "1em",
    width: "15em",
    boxSizing: "border-box",
    border: "1px solid #0366d6",
    borderRadius: "1em",
    boxShadow: "0 2px 1em #00000022",
    background: "white",
    padding: "1em",
    color: "#000",
    fontSize: "1rem",
    fontFamily: `-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif`
  }, props.style)
}));
const Range = props => React.createElement("input", _extends({
  type: "range",
  role: "slider"
}, props, {
  style: {
    fontSize: "inherit",
    display: "block",
    width: "100%",
    margin: "1em 0"
  }
}));
const Checkbox = props => React.createElement("input", _extends({
  type: "checkbox"
}, props, {
  style: _objectSpread({
    fontSize: "inherit",
    marginRight: "0.5em",
    verticalAlign: "bottom"
  }, props.style)
}));
const Label = props => React.createElement("label", _extends({}, props, {
  style: _objectSpread({
    fontSize: "inherit",
    display: "block",
    marginBottom: "1.5em"
  }, props.style)
}));
const Small = props => React.createElement("small", _extends({}, props, {
  style: _objectSpread({
    display: "block",
    marginTop: "0.5em",
    fontSize: "0.75em",
    textTransform: "uppercase",
    opacity: "0.5"
  }, props.style)
}));
const Ol = props => React.createElement("ol", _extends({}, props, {
  style: _objectSpread({
    margin: "0",
    padding: "0",
    listStyle: "none",
    lineHeight: "2em"
  }, props.style)
}));
const Li = props => React.createElement("li", _extends({}, props, {
  style: _objectSpread({
    display: "flex",
    justifyContent: "space-between"
  }, props.style)
}));
const Button = props => React.createElement("button", _extends({}, props, {
  style: _objectSpread({
    height: "1.6rem",
    padding: "2px 6px",
    border: "0",
    borderRadius: "0.5em",
    background: "#0366d6",
    fontSize: "0.75em",
    color: "#fff"
  }, props.style)
}));

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
const storage = reactAsync.globalScope.sessionStorage;
const state = {
  intercept: storage && storage.getItem("intercept") === "true" || false,
  latency: storage && storage.getItem("latency") || "0",
  update: () => {}
};

reactAsync.globalScope.__REACT_ASYNC__.devToolsDispatcher = (action, dispatch) => {
  const run = () => {
    dispatch(action);
    state.update(action);
  };

  switch (action.type) {
    case reactAsync.ActionTypes.start:
      if (state.intercept) {
        dispatch(_objectSpread$1({}, action, {
          payload: undefined
        }));
        state.update(action, run);
      } else run();

      break;

    case reactAsync.ActionTypes.fulfill:
    case reactAsync.ActionTypes.reject:
      setTimeout(run, state.latency * 1000);
      break;

    default:
      run();
  }
};

const DevTools = () => {
  const [instances, setInstances] = React.useState({});
  const [interceptState, setIntercept] = React.useState(state.intercept);
  const intercept = React.useRef(interceptState);
  const [latencyState, setLatency] = React.useState(state.latency);
  const delay = React.useRef(latencyState * 1000);

  state.update = (action, run) => {
    const label = action.meta.debugLabel;
    setInstances(instances => _objectSpread$1({}, instances, {
      [label]: {
        label,
        state: reactAsync.reducer(instances[label], action),
        run
      }
    }));
  };

  const updateLatency = event => {
    storage && storage.setItem("latency", event.target.value);
    delay.current = event.target.value * 1000;
    state.latency = event.target.value;
    setLatency(event.target.value);
  };

  const updateIntercept = event => {
    storage && storage.setItem("intercept", event.target.checked ? "true" : "false");
    state.intercept = event.target.checked;
    intercept.current = event.target.checked;
    setIntercept(event.target.checked);
  };

  const states = Object.keys(instances).map(label => instances[label]);
  const pending = states.filter(({
    state
  }) => state.status === "pending");
  const fulfilled = states.filter(({
    state
  }) => state.status === "fulfilled");
  const rejected = states.filter(({
    state
  }) => state.status === "rejected");
  return React.createElement(Root, null, React.createElement(Label, null, "Latency:", " ", React.createElement("b", null, latencyState, " ", latencyState === "1" ? "second" : "seconds"), React.createElement(Range, {
    max: "5",
    value: latencyState,
    onChange: updateLatency
  })), React.createElement(Label, null, React.createElement(Checkbox, {
    checked: interceptState,
    onChange: updateIntercept
  }), "Pause new requests"), pending.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Pending"), React.createElement(Ol, null, pending.map(({
    label,
    run
  }, index) => React.createElement(Li, {
    key: index
  }, label, " ", run && React.createElement(Button, {
    onClick: run
  }, "run"))))), fulfilled.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Fulfilled"), React.createElement(Ol, null, fulfilled.map((promise, index) => React.createElement(Li, {
    key: index
  }, promise.label)))), rejected.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Rejected"), React.createElement(Ol, null, rejected.map((promise, index) => React.createElement(Li, {
    key: index
  }, promise.label)))));
};

exports.default = DevTools;
//# sourceMappingURL=index.js.map
