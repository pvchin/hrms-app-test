function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import { ActionTypes, reducer, globalScope } from "react-async";
import { Root, Range, Checkbox, Label, Small, Ol, Li, Button } from "./components.js";
const storage = globalScope.sessionStorage;
const state = {
  intercept: storage && storage.getItem("intercept") === "true" || false,
  latency: storage && storage.getItem("latency") || "0",
  update: () => {}
};

globalScope.__REACT_ASYNC__.devToolsDispatcher = (action, dispatch) => {
  const run = () => {
    dispatch(action);
    state.update(action);
  };

  switch (action.type) {
    case ActionTypes.start:
      if (state.intercept) {
        dispatch(_objectSpread({}, action, {
          payload: undefined
        }));
        state.update(action, run);
      } else run();

      break;

    case ActionTypes.fulfill:
    case ActionTypes.reject:
      setTimeout(run, state.latency * 1000);
      break;

    default:
      run();
  }
};

const DevTools = () => {
  const [instances, setInstances] = React.useState({});
  const [interceptState, setIntercept] = React.useState(state.intercept);
  const intercept = React.useRef(interceptState);
  const [latencyState, setLatency] = React.useState(state.latency);
  const delay = React.useRef(latencyState * 1000);

  state.update = (action, run) => {
    const label = action.meta.debugLabel;
    setInstances(instances => _objectSpread({}, instances, {
      [label]: {
        label,
        state: reducer(instances[label], action),
        run
      }
    }));
  };

  const updateLatency = event => {
    storage && storage.setItem("latency", event.target.value);
    delay.current = event.target.value * 1000;
    state.latency = event.target.value;
    setLatency(event.target.value);
  };

  const updateIntercept = event => {
    storage && storage.setItem("intercept", event.target.checked ? "true" : "false");
    state.intercept = event.target.checked;
    intercept.current = event.target.checked;
    setIntercept(event.target.checked);
  };

  const states = Object.keys(instances).map(label => instances[label]);
  const pending = states.filter(({
    state
  }) => state.status === "pending");
  const fulfilled = states.filter(({
    state
  }) => state.status === "fulfilled");
  const rejected = states.filter(({
    state
  }) => state.status === "rejected");
  return React.createElement(Root, null, React.createElement(Label, null, "Latency:", " ", React.createElement("b", null, latencyState, " ", latencyState === "1" ? "second" : "seconds"), React.createElement(Range, {
    max: "5",
    value: latencyState,
    onChange: updateLatency
  })), React.createElement(Label, null, React.createElement(Checkbox, {
    checked: interceptState,
    onChange: updateIntercept
  }), "Pause new requests"), pending.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Pending"), React.createElement(Ol, null, pending.map(({
    label,
    run
  }, index) => React.createElement(Li, {
    key: index
  }, label, " ", run && React.createElement(Button, {
    onClick: run
  }, "run"))))), fulfilled.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Fulfilled"), React.createElement(Ol, null, fulfilled.map((promise, index) => React.createElement(Li, {
    key: index
  }, promise.label)))), rejected.length > 0 && React.createElement("section", null, React.createElement(Small, null, "Rejected"), React.createElement(Ol, null, rejected.map((promise, index) => React.createElement(Li, {
    key: index
  }, promise.label)))));
};

export default DevTools;